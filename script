//palindrome
echo "enter a number:"
read n
rev=0
temp=$n
while [ $n -gt 0 ] 
do
digit=$(($n % 10))
rev=$(($rev * 10 + $digit))
n=$(($n / 10))
done
echo "$rev"
if [ $temp -eq $rev ]; then
   echo "palindrome"
else
   echo "not palindrome"
fi


//leap year 
echo "enter a year"
read year
if(( ((year%4==0))&&((year%100!=0))||((year%400==0)) ))
then
   echo "leap year"
else
   echo "not leap year"
fi


//sort array 
echo "enter limit:"
read limit
for((i=0;i<limit;i++))
do
  echo "enter element $((i+1))"
  read arr[i]
done
for((i=0;i<limit;i++))
do
  for((j=i+1;j<limit;j++))
  do
  if((arr[i]>arr[j]))
  then
    temp=${arr[i]}
    arr[i]=${arr[j]}
    arr[j]=$temp
  fi
  done
done
echo "sorted array is:"
for((i=0;i<limit;i++))
do
  echo "${arr[i]}"
done
length=${#arr[@]}
echo "$length"


//sum of digits
echo "enter a number:"
read n
if [ $n -lt 0 ]
then
    sum=$n
else
sum=0
while [ $n -ne 0 ] 
do
   digit=$(($n%10))
   sum=$(($sum+$digit))
   n=$(($n/10))
done
n=$sum
fi
echo "$sum"


//strong
echo "enter a number"
read n
temp=$n
sum=0
while [ $n -gt 0 ]
do
  digit=$(($n%10))
  fact=1
  for((i=1;i<=$digit;i++))
  do
    fact=$(($fact*i))
  done
  sum=$(($sum+$fact))
  n=$(($n/10))
done
if [ $temp -eq $sum ]
then
   echo "strong"
else
   echo "not so strong"
fi

//armstrong
echo "enter a number:"
read num
sum=0
temp=$num
while [ $num -gt 0 ];
do
  digit=$(($num%10))
  sum=$(($sum+$digit*$digit*$digit))
  num=$(($num/10))
done
if [ $temp -eq $sum ]; then
  echo "armstrong number:"
else
  echo "not armstrong"
fi



//count
echo "enter filename:"
read file
echo "enter word to count:"
read word 
count=$(grep -o -w "$word" "$file" | wc -l)
echo "the word $word appears in $count times"


//factorial
echo "enter a number:"
read num
fact=1
for((i=1;i<=num;i++))
do
  fact=$(($fact*$i))
done
echo "$fact"


//remove duplicates
echo "enter the file"
read file
echo "enter the output file"
read uniq
sort "$file" | uniq > "$uniq"
echo "duplicates removed"


//upper to lower file
for shell in *; 
do
  if [ -f "$shell" ]; then
    new_name=$(echo "$shell" | tr '[:upper:]' '[:lower:]')
    if [ "$file" != "$new_name" ]; then
      mv "$shell" "$new_name"
      echo "renamed $shell to $new_name"
    fi
  fi
done
echo "All filenames in the directory converted to lowercase."


//max element in array
array=(88 21 99 65 1)
max=${array[0]}
for num in "${array[@]}"; 
do
   if((num>max)); then
     max=$num
   fi
done
echo "maximum element is $max"

//bill calc
calculate_bill()
{
   local units=$1
   local bill=0

   local rate1=1.50
   local rate2=3.00
   local rate3=4.50
   local rate4=6.00

   if [ $units -le 50 ]; then
	bill=$(echo "$units * $rate1" | bc)
   elif [ $units -le 150 ]; then
	bill=$(echo "50 * $rate1 + ($units-50) * $rate2" | bc)
   elif [ $units -le 250 ]; then
	bill=$(echo "50 * $rate1 + 100 * $rate2 + ($units - 150) * $rate3" | bc)
   else
	bill=$(echo "50 * $rate1 + 100 * $rate2 + 150 * $rate3 + ($units-200) * $rate4" | bc)
   fi
echo "total electricity bill for $units units: $bill"
}
echo "enter number of units consumed:" 
read units
if ! [[ $units =~ ^[0-9]+$ ]]; then
  echo "please enter a valid number of units:"
  exit 1
fi
calculate_bill $units
   

//grade
calculate_grade()
{
  local average=$1
  local grade=""
  if (( $(echo "$average >= 90" | bc -l) )); then
	grade="A"
  elif (( $(echo "$average >= 80" | bc -l) )); then
        grade="B"
  elif (( $(echo "$average >= 70" | bc -l) )); then
	grade="C"
  elif (( $(echo "$average >= 60" | bc -l) )); then
	grade="D"
  else
        grade="F"
  fi

  echo $grade
}

echo "enter marks for subj1:"
read sub1
echo "enter marks for subj2:"
read sub2
echo "enter marks for subj3:"
read sub3
echo "enter marks for subj4:"
read sub4
echo "enter marks for subj5:"
read sub5
if ! [[ $sub1 =~ ^[0-9]+$ && $sub2 =~ ^[0-9]+$ && $sub3 =~ ^[0-9]+$ && $sub4 =~ ^[0-9]+$ && $sub5 =~ ^[0-9]+$ ]]; then
echo "please enter a valid number"
exit 1
fi

total=$(echo "$sub1 + $sub2 + $sub3 + $sub4 + $sub5" | bc)
average=$(echo "$total / 5" | bc -l)
grade=$(calculate_grade $average)

echo "total marks: $total"
echo "average marks is $average"
echo "grade is $grade"

//multiplication table
echo "enter a number"
read n
for((i=1;i<=10;i++));
do
echo "$n * $i = $((n*i))"
done

//word count
echo "enter a sentence:"
read sent
word=($sent)
echo "number of words: ${#word[@]}"
echo "words:"
for word in "${word[@]}"; do
    echo "$word"
done

//no: of words in a file
echo "enter filename:"
read file
if [ -f "$file" ]; then
   words=$(wc -w < "$file")
   echo "file is $file and no: of words is $words"
else
   echo "error"
fi


//file count
echo "file count"
dir=$(pwd)
file_count=$(ls -l $dir | wc -l)
echo "$file_count"

//prime
echo "enter a number:"
read n
is_prime=1
if [ $n -le 1 ]; then
   echo "$n is not a prime number"
   exit
fi
for (( i=2;i<=n/2;i++ )); do
  if [ $((n % i)) -eq 0 ]; then
       is_prime=0
       break
  fi
done

if [ $is_prime -eq 1 ]; then
  echo "prime number:"
else
  echo "not prime"
fi

//fibonacci
echo "enter number of terms"
read terms

if [ $terms -le 0 ]; then
  echo "please enter a positive integer"
  exit 1
fi
a=0
b=1
echo "fibonacci series:"
for((i=0;i<terms;i++)); do

  echo -n "$a "
  next=$((a+b))
  a=$b
  b=$next
done
echo

//odd or even
echo "enter a number"
read num
if [ $((num % 2)) -eq 0 ] 
then
   echo "even number"
else
   echo "odd number"
fi 

//reverse of a number
echo "enter num"
read num
rev=$(echo "$num" | rev)
echo $rev


